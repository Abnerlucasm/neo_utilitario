/**
 * Script de diagn√≥stico para m√≥dulos de aprendizado
 * 
 * Adicione este script √† p√°gina para obter informa√ß√µes detalhadas
 * sobre a estrutura do m√≥dulo atual e poss√≠veis problemas.
 */

class ModuleDebugger {
    constructor() {
        this.moduleId = window.location.pathname.split('/').pop();
    }
    
    async diagnose() {
        console.group('üîç Diagn√≥stico do M√≥dulo');
        console.log('ID do m√≥dulo:', this.moduleId);
        
        try {
            // Carregar dados do m√≥dulo
            const moduleData = await this.fetchModule();
            
            // Verificar estrutura do conte√∫do
            this.checkContent(moduleData.content);
            
            // Verificar estrutura das se√ß√µes
            this.checkSections(moduleData.sections, moduleData.content);
            
            // Verificar progresso
            await this.checkProgress();
            
            console.log('‚úÖ Diagn√≥stico conclu√≠do');
        } catch (error) {
            console.error('‚ùå Erro durante diagn√≥stico:', error);
        }
        
        console.groupEnd();
    }
    
    async fetchModule() {
        console.log('Carregando dados do m√≥dulo...');
        
        const response = await fetch(`/api/learning/modules/${this.moduleId}`);
        if (!response.ok) {
            const error = await response.json();
            console.error('Erro ao carregar m√≥dulo:', error);
            throw new Error('Falha ao carregar m√≥dulo');
        }
        
        const data = await response.json();
        console.log('Dados do m√≥dulo:', data);
        
        return data;
    }
    
    checkContent(content) {
        console.group('üìÑ Verificando conte√∫do');
        
        if (!content || typeof content !== 'object') {
            console.error('‚ùå Conte√∫do inv√°lido:', content);
            console.groupEnd();
            return;
        }
        
        console.log(`Total de p√°ginas no conte√∫do: ${Object.keys(content).length}`);
        
        // Verificar cada p√°gina
        for (const pageId in content) {
            const page = content[pageId];
            
            console.group(`P√°gina: ${pageId}`);
            
            if (!page || typeof page !== 'object') {
                console.error('‚ùå Estrutura inv√°lida:', page);
            } else {
                console.log('T√≠tulo:', page.title || '(sem t√≠tulo)');
                console.log('Conte√∫do:', page.content ? `${page.content.substring(0, 50)}...` : '(sem conte√∫do)');
                
                if (!page.title) {
                    console.warn('‚ö†Ô∏è P√°gina sem t√≠tulo');
                }
                
                if (!page.content) {
                    console.warn('‚ö†Ô∏è P√°gina sem conte√∫do');
                }
            }
            
            console.groupEnd();
        }
        
        console.groupEnd();
    }
    
    checkSections(sections, content) {
        console.group('üìë Verificando se√ß√µes');
        
        if (!sections || !Array.isArray(sections)) {
            console.error('‚ùå Se√ß√µes inv√°lidas:', sections);
            console.groupEnd();
            return;
        }
        
        console.log(`Total de se√ß√µes: ${sections.length}`);
        
        // Verificar cada se√ß√£o
        sections.forEach((section, index) => {
            console.group(`Se√ß√£o ${index + 1}: ${section?.title || '(sem t√≠tulo)'}`);
            
            if (!section || typeof section !== 'object') {
                console.error('‚ùå Estrutura inv√°lida:', section);
                console.groupEnd();
                return;
            }
            
            console.log('ID:', section.id || '(sem ID)');
            
            if (!section.id) {
                console.warn('‚ö†Ô∏è Se√ß√£o sem ID');
            }
            
            if (!section.title) {
                console.warn('‚ö†Ô∏è Se√ß√£o sem t√≠tulo');
            }
            
            // Verificar p√°ginas da se√ß√£o
            if (!section.pages || !Array.isArray(section.pages)) {
                console.error('‚ùå Lista de p√°ginas inv√°lida:', section.pages);
            } else {
                console.log(`Total de p√°ginas na se√ß√£o: ${section.pages.length}`);
                
                section.pages.forEach((pageId, pageIndex) => {
                    console.group(`P√°gina ${pageIndex + 1}`);
                    
                    if (typeof pageId === 'object') {
                        console.error('‚ùå ID de p√°gina √© um objeto:', pageId);
                    } else {
                        const pageIdStr = String(pageId);
                        console.log('ID:', pageIdStr);
                        
                        // Verificar se a p√°gina existe no conte√∫do
                        if (content && content[pageIdStr]) {
                            console.log('T√≠tulo:', content[pageIdStr].title || '(sem t√≠tulo)');
                        } else {
                            console.error('‚ùå P√°gina n√£o encontrada no conte√∫do');
                        }
                    }
                    
                    console.groupEnd();
                });
            }
            
            console.groupEnd();
        });
        
        console.groupEnd();
    }
    
    async checkProgress() {
        console.group('üìä Verificando progresso');
        
        try {
            const response = await fetch(`/api/progress/${this.moduleId}`);
            
            if (response.ok) {
                const progress = await response.json();
                console.log('Dados de progresso:', progress);
                
                // Verificar formato dos dados
                if (progress.completed_pages && Array.isArray(progress.completed_pages)) {
                    console.log('P√°ginas conclu√≠das:', progress.completed_pages.length);
                } else {
                    console.warn('‚ö†Ô∏è completed_pages inv√°lido:', progress.completed_pages);
                }
                
                if (progress.total_pages === undefined || progress.total_pages === null) {
                    console.warn('‚ö†Ô∏è total_pages n√£o definido');
                } else {
                    console.log('Total de p√°ginas:', progress.total_pages);
                }
            } else {
                console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar o progresso:', response.status);
            }
        } catch (error) {
            console.error('‚ùå Erro ao verificar progresso:', error);
        }
        
        console.groupEnd();
    }
}

console.log('üîß Script de diagn√≥stico de m√≥dulos carregado');
console.log('Para iniciar o diagn√≥stico, execute: const debugger = new ModuleDebugger(); debugger.diagnose();');

// Adicionar ao objeto window para facilitar acesso pelo console
window.ModuleDebugger = ModuleDebugger; 