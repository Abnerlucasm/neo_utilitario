/**
 * Script para corrigir a estrutura de um m√≥dulo diretamente no navegador
 */
class ModuleFixer {
    constructor() {
        this.moduleId = window.location.pathname.split('/').pop();
    }

    async fix() {
        try {
            console.group('üîß Corre√ß√£o de M√≥dulo');
            console.log('ID do m√≥dulo:', this.moduleId);
            
            // 1. Buscar o m√≥dulo
            const module = await this.fetchModule();
            console.log('Dados originais do m√≥dulo:', module);
            
            // 2. Corrigir a estrutura
            const fixedModule = this.fixModuleStructure(module);
            console.log('Dados corrigidos do m√≥dulo:', fixedModule);
            
            // 3. Salvar as altera√ß√µes
            if (this.hasChanges(module, fixedModule)) {
                const saved = await this.saveModule(fixedModule);
                console.log('M√≥dulo salvo com sucesso:', saved);
                alert('M√≥dulo corrigido com sucesso! Recarregue a p√°gina para ver as altera√ß√µes.');
            } else {
                console.log('Nenhuma altera√ß√£o necess√°ria.');
                alert('O m√≥dulo j√° est√° com a estrutura correta. Nenhuma altera√ß√£o foi necess√°ria.');
            }
            
            console.groupEnd();
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao corrigir m√≥dulo:', error);
            alert(`Erro ao corrigir o m√≥dulo: ${error.message}`);
            console.groupEnd();
            return false;
        }
    }

    async fetchModule() {
        const response = await fetch(`/api/learning/modules/${this.moduleId}`);
        if (!response.ok) {
            throw new Error(`Erro ao buscar m√≥dulo: ${response.status}`);
        }
        return await response.json();
    }

    fixModuleStructure(module) {
        // Clonar para n√£o modificar o original
        const fixedModule = JSON.parse(JSON.stringify(module));
        let changesMade = 0;
        
        // 1. Verificar conte√∫do
        if (!fixedModule.content || typeof fixedModule.content !== 'object') {
            console.warn('Conte√∫do inv√°lido, criando objeto vazio');
            fixedModule.content = {};
            changesMade++;
        }
        
        // 2. Verificar se√ß√µes
        if (!Array.isArray(fixedModule.sections)) {
            console.warn('Se√ß√µes inv√°lidas, criando array vazio');
            fixedModule.sections = [];
            changesMade++;
        }
        
        // 3. Corrigir objetos como IDs de p√°gina nas se√ß√µes
        if (Array.isArray(fixedModule.sections)) {
            fixedModule.sections = fixedModule.sections.map(section => {
                if (!section || typeof section !== 'object') {
                    console.warn('Se√ß√£o inv√°lida encontrada, corrigindo');
                    changesMade++;
                    return {
                        id: this.generateId(),
                        title: 'Se√ß√£o corrigida',
                        pages: []
                    };
                }
                
                // Garantir que a se√ß√£o tenha um ID
                if (!section.id) {
                    console.warn('Se√ß√£o sem ID, adicionando ID');
                    section.id = this.generateId();
                    changesMade++;
                }
                
                // Garantir que a se√ß√£o tenha um t√≠tulo
                if (!section.title) {
                    console.warn('Se√ß√£o sem t√≠tulo, adicionando t√≠tulo padr√£o');
                    section.title = 'Se√ß√£o sem t√≠tulo';
                    changesMade++;
                }
                
                // Verificar p√°ginas da se√ß√£o
                if (!Array.isArray(section.pages)) {
                    console.warn(`Se√ß√£o ${section.title} sem array de p√°ginas v√°lido, corrigindo`);
                    section.pages = [];
                    changesMade++;
                } else {
                    // Filtrar e corrigir p√°ginas
                    const originalLength = section.pages.length;
                    const fixedPages = section.pages.filter(pageId => {
                        // Se for um objeto
                        if (typeof pageId === 'object') {
                            // Se o objeto tiver uma propriedade id, usar essa propriedade
                            if (pageId && pageId.id && (typeof pageId.id === 'string' || typeof pageId.id === 'number')) {
                                console.warn(`Encontrado objeto como ID de p√°gina com propriedade id: ${pageId.id}`);
                                return true;
                            }
                            console.warn('Encontrado objeto inv√°lido como ID de p√°gina, removendo');
                            return false;
                        }
                        return true;
                    }).map(pageId => {
                        // Converter objetos com id para string
                        if (typeof pageId === 'object' && pageId && pageId.id) {
                            return String(pageId.id);
                        }
                        return pageId;
                    });
                    
                    if (originalLength !== fixedPages.length) {
                        console.warn(`Removidas ${originalLength - fixedPages.length} p√°ginas inv√°lidas da se√ß√£o ${section.title}`);
                        changesMade++;
                    }
                    
                    section.pages = fixedPages;
                }
                
                return section;
            });
        }
        
        // 4. Verificar e criar conte√∫do padr√£o para p√°ginas que n√£o existem
        if (Array.isArray(fixedModule.sections) && fixedModule.content) {
            let missingPages = 0;
            
            // Para cada se√ß√£o
            fixedModule.sections.forEach(section => {
                if (Array.isArray(section.pages)) {
                    // Para cada p√°gina na se√ß√£o
                    section.pages.forEach(pageId => {
                        // Verificar se a p√°gina existe no conte√∫do
                        if (!fixedModule.content[pageId]) {
                            console.warn(`P√°gina ${pageId} na se√ß√£o "${section.title}" n√£o encontrada no conte√∫do, criando conte√∫do padr√£o`);
                            
                            // Criar conte√∫do padr√£o para a p√°gina
                            fixedModule.content[pageId] = {
                                title: `P√°gina ${missingPages + 1} - ${section.title}`,
                                content: `# P√°gina ${missingPages + 1} - ${section.title}\n\nEste √© um conte√∫do padr√£o criado automaticamente. Voc√™ pode editar esta p√°gina para adicionar seu pr√≥prio conte√∫do.`
                            };
                            
                            missingPages++;
                            changesMade++;
                        }
                    });
                }
            });
            
            console.log(`Criado conte√∫do padr√£o para ${missingPages} p√°ginas ausentes`);
        }
        
        // 5. Se o m√≥dulo n√£o tem se√ß√µes, criar uma se√ß√£o padr√£o com uma p√°gina
        if (Array.isArray(fixedModule.sections) && fixedModule.sections.length === 0) {
            console.warn('M√≥dulo sem se√ß√µes, criando se√ß√£o padr√£o com uma p√°gina');
            
            // Gerar ID para a p√°gina
            const pageId = this.generateId();
            
            // Criar se√ß√£o padr√£o
            fixedModule.sections.push({
                id: this.generateId(),
                title: 'Introdu√ß√£o',
                pages: [pageId]
            });
            
            // Criar conte√∫do padr√£o para a p√°gina
            fixedModule.content[pageId] = {
                title: 'Bem-vindo',
                content: '# Bem-vindo ao M√≥dulo\n\nEste √© um conte√∫do padr√£o criado automaticamente. Voc√™ pode editar esta p√°gina para adicionar seu pr√≥prio conte√∫do.'
            };
            
            changesMade++;
        }
        
        console.log(`Total de corre√ß√µes feitas: ${changesMade}`);
        return fixedModule;
    }

    hasChanges(original, fixed) {
        return JSON.stringify(original) !== JSON.stringify(fixed);
    }

    async saveModule(module) {
        const response = await fetch(`/api/learning/modules/${this.moduleId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                content: module.content,
                sections: module.sections
            })
        });
        
        if (!response.ok) {
            const error = await response.json();
            throw new Error(`Erro ao salvar m√≥dulo: ${error.error || response.status}`);
        }
        
        return await response.json();
    }

    generateId() {
        return 'id_' + Math.random().toString(36).substr(2, 9);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('üîß Script de corre√ß√£o de m√≥dulo carregado!');
    console.log('Para corrigir este m√≥dulo, execute: const fixer = new ModuleFixer(); fixer.fix();');
    
    // Adicionar bot√£o de corre√ß√£o √† p√°gina
    const addFixButton = () => {
        const contentArea = document.querySelector('.content-area');
        if (!contentArea) return;
        
        const button = document.createElement('button');
        button.className = 'button is-warning mt-4';
        button.style.marginRight = '10px';
        button.innerHTML = '<span class="icon"><i class="fas fa-wrench"></i></span><span>Corrigir Estrutura</span>';
        button.onclick = async () => {
            if (confirm('Deseja corrigir a estrutura deste m√≥dulo? Isso pode resolver problemas de visualiza√ß√£o de conte√∫do.')) {
                button.classList.add('is-loading');
                const fixer = new ModuleFixer();
                await fixer.fix();
                button.classList.remove('is-loading');
            }
        };
        
        // Adicionar ap√≥s outros bot√µes na √°rea de conte√∫do
        const navButtons = contentArea.querySelector('.navigation-buttons');
        if (navButtons) {
            navButtons.prepend(button);
        } else {
            contentArea.appendChild(button);
        }
    };
    
    // Tentar adicionar o bot√£o ap√≥s um pequeno delay para garantir que o DOM esteja pronto
    setTimeout(addFixButton, 1000);
    
    // Adicionar ao objeto window para acesso pelo console
    window.ModuleFixer = ModuleFixer;
}); 